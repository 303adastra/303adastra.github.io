@startuml
left to right direction
skinparam linetype polyline
/'
skinparam linetype ortho
'/

frame "ibd [ PID-Controlled Clock Drive ]" {

  component "<b>Real Time Clock (RTC)</b>" as rtc

  rectangle "<b>PID Controller</b>" <<microcontroller>> as G {

    component "<b>t = serial.read(rtc_pin)</b>" as serial_read_rtc
    component "<b>Reference Angle, theta_r(t-t0)</b>" as theta_r
    /'note bottom of theta_r : Desired angular position\ncalculated from elapsed time, t-t0'/

    interface "<b>error, e</b>" as e
    together {
      component "<b>K_p * e</b>" as p
      component "<b>K_i * de*dt</b>" as i
      component "<b>K_d * de/dt</b>" as d
    }

    e <- theta_r : +

    e --> p
    e --> i
    e --> d

    interface "<b>Control variable, u</b>" as u
    /'note bottom of u : Control variable used\nfor setting PWM duty cycle'/
    p --> u : +
    i --> u : +
    d --> u : +

    component "<b>pwm.duty(u)</b>" as pwm_gen
    u -> pwm_gen

    component "<b>n = serial.read(encoder_pin)</b>" as serial_read_encoder
    component "<b>Output Angle, theta(n)</b>" as theta

    theta_r <- serial_read_rtc
    theta -> e : -
    theta <--- serial_read_encoder
  }

  interface "<b>Serial Bus</b>" as serial_bus_rtc
  serial_bus_rtc . rtc : <<SPI/I2C>>
  serial_bus_rtc -- serial_read_rtc

  interface "<b>Motor Speed (PWM)</b>" as pwm
  pwm_gen --> pwm

  rectangle "<b>Motor Drive System</b>" as H {
    component "<b>motor drive</b>" as drive
    component "<b>motor</b>" as motor
    component "<b>gearbox</b>" as gearbox
    motor <- drive
    gearbox <- motor
  }

  pwm ..> drive

  interface "<b>Right Ascension (RA) Shaft</b>" as ra
  component "<b>Rotory Encoder</b>" as encoder
  interface "<b>Serial bus</b>" as serial_bus_encoder

  ra <. gearbox
  encoder <.. ra

  serial_bus_encoder - serial_read_encoder
  serial_bus_encoder .. encoder : <<SPI/I2C>>
}
@enduml
